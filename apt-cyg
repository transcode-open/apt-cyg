#!/bin/ash
# apt-cyg: install tool for Cygwin similar to debian apt-get
#
# The MIT License (MIT)
#
# Copyright (c) 2013 Trans-code Design
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

usage='
NAME
  apt-cyg - package manager utility

SYNOPSIS
  apt-cyg [operation] [options] [targets]

DESCRIPTION
  apt-cyg is a package management utility that tracks installed packages on a
  Cygwin system. Invoking apt-cyg involves specifying an operation with any
  potential options and targets to operate on. A target is usually a package
  name, file name, URL, or a search string. Targets can be provided as command
  line arguments.

OPERATIONS
  install
    Install package(s).

  remove
    Remove package(s) from the system.

  upgradesetup
    Prepare for an upgrade by copying required files to another root such as /fw,
        c:\cygwin64\bin\ash.exe /bin/apt-cyg upgradesetup /fw

  upgradeinstall
    Download and install all packages to another root such as /fw.  
    This needs to run from that root, e.g. as follows,
        c:\cygwin64\bin\ash.exe /bin/apt-cyg upgradeinstall /fw

  upgradecopy
    Replace directories of the actual root with those from the upgraded root,
        c:\cygwin64\fw\bin\ash.exe /bin/apt-cyg upgradecopy

  upgradecomplete
    Run post-install scripts and remove the secondary root,
        c:\cygwin64\bin\ash.exe /bin/apt-cyg upgradecomplete

  update
    Download a fresh copy of the master package list (setup.ini) from the
    server defined in setup.rc.

  download
    Retrieve package(s) from the server, but do not install/upgrade anything.

  show
    Display information on given package(s).

  depends
    Produce a dependency tree for a package.

  rdepends
    Produce a tree of packages that depend on the named package.

  list
    Search each locally-installed package for names that match regexp. If no
    package names are provided in the command line, all installed packages will
    be queried.

  listall
    This will search each package in the master package list (setup.ini) for
    names that match regexp.

  category
    Display all packages that are members of a named category.

  listfiles
    List all files owned by a given package. Multiple packages can be specified
    on the command line.

  search
    Search for downloaded packages that own the specified file(s). The path can
    be relative or absolute, and one or more files can be specified.

  searchall
    Search cygwin.com to retrieve file information about packages. The provided
    target is considered to be a filename and searchall will return the
    package(s) which contain this file.

  mirror
    Set the mirror; a full URL to a location where the database, packages, and
    signatures for this repository can be found. If no URL is provided, display
    current mirror.

  cache
    Set the package cache directory. If a file is not found in cache directory,
    it will be downloaded. Unix and Windows forms are accepted, as well as
    absolute or regular paths. If no directory is provided, display current
    cache.

OPTIONS
  --nodeps
    Specify this option to skip all dependency checks.

  --version
    Display version and exit.
'

version='
apt-cyg version 1

The MIT License (MIT)

Copyright (c) 2005-9 Stephen Jungels
'

export PATH=/bin:/usr/bin
mirrorsource="http://mirrors.kernel.org/sourceware/cygwin/"

repl() {
  local n m
  n="$1"
  while :
  do
    m="${n%%$2*}"
    if [ "${m}" = "${n}" ]
    then
      _return_repl="${n}"
      return
    else
      n="${m}$3${n#*$2}"
    fi
  done
}

getfile () {
  if wget --version > /dev/null 2>&1
  then
    if ! wget --no-verbose "$@"
    then
      error "wget --no-verbose $*" || return 1
    fi
  else
    of=
    while [ $# -gt 1 ] ; do
      if [ "$1" = "-O" ] ; then
        shift
        of="$1"
      fi
      shift
    done
    if [ ${#of} -eq 0 ] ; then
      of="${1##*/}"
    fi
    if curl --version > /dev/null 2>&1
    then
      if ! curl -s -o "${of}" "$1"
      then
        error "curl -s -o \"${of}\" \"$1\"" || return 1
      fi
    else
      if type lynx > /dev/null 2>&1
      then
        # Lynx fails when it cannot access the home directory for user
        # configuration.  Creating the home directory works this around.
        if [ ! -d "${HOME}" ]
        then
          mkdir -p "${HOME}"
        fi
        if ! { lynx -source "$1" > "${of}" ; }
        then
          error "lynx -source \"$1\" > \"${of}\"" || return 1
        fi
      else
        error "No wget, lynx or curl found" || return 1
      fi
    fi
  fi
}
export getfile


find_workspace () {
  local setup
  setup="${prefix}/etc/setup/setup.rc"
  [ -f "${setup}" ] || error "No setup in $(cygpath -aw ${setup})" || return 1
  cache=$(awk '
  BEGIN {
    RS = "\n\\<"
    FS = "\n\t"
  }
  $1 == "last-cache" {
    print $2
  }
  ' "${setup}")
  if [ ${#cache} -eq 0 ] ; then
    mkdir -p /install
    cache="/install"
  else
    cache=$(cygpath -ua "${cache}")
  fi
  if [ "${cache%/}" = "${cache}" ] ; then
    cacheslash="${cache}/"
  else
    cacheslash="${cache}"
  fi

  mirror=$(awk '
  /last-mirror/ {
    getline
    print $1
  }
  ' "${setup}")
  if [ ${#mirror} -eq 0 ] ; then
    mirror="${mirrorsource}"
  fi

  repl "${mirror}" "/" "%2f"
  repl "${_return_repl}" ":" "%3a"
  mirrordir="${_return_repl}"

  mkdir -p "${cacheslash}${mirrordir}/${arch}"
  cd "${cacheslash}${mirrordir}/${arch}"
  [ ! -e setup.ini ] || [ "$1" = "--update" ] || return 0
  get_setup
}

get_setup () {
  u="${mirrorsource%/}/${arch}/setup.xz"
  d="$(cygpath -aw .)"
  getfile -N "${u}" || return 1
  if [ -e setup.xz ] && unxz setup.xz
  then
    if [ -f setup.ini ]
    then
      mv setup.ini setup.ini-save
    fi
    mv setup setup.ini || return 1
    /bin/echo -E "Updated setup.ini from ${u} in ${d}"
  else
    /bin/echo -E "Error updating setup.ini from ${u} in ${d}" || return 1
  fi
}

check_packages () {
  if [ "$pks" ]
  then
    return 0
  else
    echo "No packages found."
    return 1
  fi
}

warn () {
  if test -t 2 ; then
    {
        tput setaf 1
        /bin/echo -E "$*"
        tput sgr0
    } >&2
  else
    /bin/echo -E "$*" >&2
  fi
}
export warn

error () {
  warn "Error: $*"
  return 1
}
export error

qecho () {
  [ "${quiet}" = "1" ] || /bin/echo -E "$@"
}

apt_update () {
  find_workspace --update
}

apt_category () {
  check_packages || return 1
  find_workspace || return 1
  for pkg in $pks
  do
    awk '
    $1 == "@" {
      pck = $2
    }
    $1 == "category:" && $0 ~ query {
      print pck
    }
    ' query="$pks" setup.ini
  done
}

apt_list () {
  local sbq
  sbq=0
  for pkg in $pks
  do
    sbq=$((sbq + 1))
    [ $sbq -eq 1 ] || echo
    awk 'NR>1 && !a[$1]++ && $1~pkg && $0=$1' pkg="$pkg" /etc/setup/installed.db
  done
  [ $sbq -eq 0 ] || return
  awk 'NR>1 && !a[$1]++ && $0=$1' /etc/setup/installed.db
}

apt_listall () {
  check_packages || return 1
  find_workspace || return 1
  local sbq
  sbq=0
  for pkg in $pks
  do
    sbq=$((sbq + 1))
    [ $sbq -eq 1 ] || echo
    awk '$1~pkg && $0=$1' RS='\n\n@ ' FS='\n' pkg="$pkg" setup.ini
  done
}

apt_listfiles () {
  check_packages || return 1
  find_workspace || return 1
  local pkg sbq
  sbq=0
  for pkg in $pks
  do
    sbq=$((sbq + 1))
    [ $sbq -eq 1 ] || echo
    if [ ! -e /etc/setup/"$pkg".lst.gz ]
    then
      download "$pkg"
    fi
    gzip -cd /etc/setup/"$pkg".lst.gz
  done
}

apt_show () {
  find_workspace || return 1
  check_packages || return 1
  local sbq
  sbq=0
  for pkg in $pks
  do
    sbq=$((sbq + 1))
    [ $sbq -eq 1 ] || echo
    awk '
    $1 == query {
      print
      fd++
    }
    END {
      if (! fd)
        print "Unable to locate package " query
    }
    ' RS='\n\n@ ' FS='\n' query="$pkg" setup.ini
  done
}

apt_depends () {
  find_workspace || return 1
  check_packages || return 1
  for pkg in $pks
  do
    awk '
    @include "join"
    $1 == "@" {
      apg = $2
    }
    $1 == "requires:" {
      for (z=2; z<=NF; z++)
        reqs[apg][z-1] = $z
    }
    END {
      prpg(ENVIRON["pkg"])
    }
    function smartmatch(small, large,    values) {
      for (each in large)
        values[large[each]]
      return small in values
    }
    function prpg(fpg) {
      if (smartmatch(fpg, spath)) return
      spath[length(spath)+1] = fpg
      print join(spath, 1, length(spath), " > ")
      if (isarray(reqs[fpg]))
        for (each in reqs[fpg])
          prpg(reqs[fpg][each])
      delete spath[length(spath)]
    }
    ' setup.ini
  done
}

apt_rdepends () {
  find_workspace || return 1
  for pkg in $pks
  do
    awk '
    @include "join"
    $1 == "@" {
      apg = $2
    }
    $1 == "requires:" {
      for (z=2; z<=NF; z++)
        reqs[$z][length(reqs[$z])+1] = apg
    }
    END {
      prpg(ENVIRON["pkg"])
    }
    function smartmatch(small, large,    values) {
      for (each in large)
        values[large[each]]
      return small in values
    }
    function prpg(fpg) {
      if (smartmatch(fpg, spath)) return
      spath[length(spath)+1] = fpg
      print join(spath, 1, length(spath), " < ")
      if (isarray(reqs[fpg]))
        for (each in reqs[fpg])
          prpg(reqs[fpg][each])
      delete spath[length(spath)]
    }
    ' setup.ini
  done
}

apt_download () {
  check_packages || return 1
  find_workspace || return 1
  local pkg sbq
  sbq=0
  for pkg in $pks
  do
    sbq=$((sbq + 1))
    [ $sbq -eq 1 ] || echo
    download "$pkg"
  done
}

download () {
  local clean pkg digest hflags desc
  if [ "$1" = "--clean" ]
  then
    clean=1
    shift
  fi
  pkg="$1"
  # look for package and save desc file

  desc="/tmp/desc$$.txt"
  awk '$1 == pc' RS='\n\n@ ' FS='\n' pc="${pkg}" setup.ini > "${desc}"
  if [ ! -s "${desc}" ]
  then
    warn "Unable to locate package $pkg"
    return 1
  fi

  # download and unpack the bz2 or xz file

  # pick the latest version, which comes first
  set -- $(awk '$1 == "install:"' "${desc}")
  if [ $# -eq 0 ]
  then
    error 'Could not find "install" in package description: obsolete package?' || return 1
  fi

  dn=$(dirname $2)
  bn=$(basename $2)
  _return_download_dirname="${dn}"
  _return_download_basename="${bn}"
  if [ "${clean}" = "1" ]
  then
    rm -rf "${cacheslash}${mirrordir}/${dn}"
    return 0
  fi
  [ ! -f "${cacheslash}${mirrordir}/${dn}/${bn}.unpacked" ] || [ "${force}" = "1" ] || return 0

  # check the md5
  digest=$4
  case ${#digest} in
   32) hash=md5sum    ;;
  128) hash=sha512sum ;;
  esac
  hflags=""
  [ "${quiet}" != "1" ] || hflags="${hflags} --quiet"
  mkdir -p "${cacheslash}${mirrordir}/${dn}"
  (
    cd "${cacheslash}${mirrordir}/${dn}"
    if ! test -e "${bn}" || ! echo "${digest} ${bn}" | "${hash}" --check ${hflags} > /dev/null 2> /dev/null
    then
        getfile -O "${bn}" "${mirror%/}/${dn}/${bn}" || return 1
        rm -f "${bn}.unpacked"
        echo "$digest $bn" | "${hash}" --check ${hflags} > /dev/null 2> /dev/null \
            || error "Hash ${hash} of ${cacheslash}${mirrordir}/${dn}/${bn} did not result in ${digest}" || return 1
    else
        qecho "Reusing existing file ${cacheslash}${mirrordir}/${dn}/${bn}"
    fi

    tar --numeric-owner -tf "${bn}" | gzip > "${prefix}/etc/setup/${pkg}.lst.gz"
  ) || return 1
  mv "${desc}" "${cacheslash}${mirrordir}/${dn}/desc"
}

apt_search () {
  check_packages || return 1
  echo "Searching downloaded packages..."
  for pkg in $pks
  do
    key="bin/${pkg##*/}"
    [ -x "/usr/$key" ] || key="${pkg}"
    for manifest in /etc/setup/*.lst.gz
    do
      if gzip -cd $manifest | grep -q "$key"
      then
        package=$(echo "${manifest}" | sed '
        s,/etc/setup/,,
        s,.lst.gz,,
        ')
        echo "$package"
      fi
    done
  done
}

apt_searchall () {
  for pkg in $pks
  do
    qs="text=1&arch=${arch}&grep=${pkg}"
    getfile -O "/tmp/matches$$.txt" "http://cygwin.com/cgi-bin2/package-grep.cgi?$qs" || return 1
    awk '
    NR == 1 {next}
    mc[$1]++ {next}
    /-debuginfo-/ {next}
    /^cygwin32-/ {next}
    {print $1}
    ' 'FS=-[:digit:]' "/tmp/matches$$.txt"
    rm -f "/tmp/matches$$.txt"
  done
}

indent=0
ind=""
force_package_check=1

read_upgraded() {
  if [ -f "${prefix}/etc/setup/upgraded.txt" ]
  then
    read -r _return_upgraded_pks < "${prefix}/etc/setup/upgraded.txt"
  else
    _return_upgraded_pks=""
  fi
}

check_upgraded() {
  read_upgraded
  local p
  for p in ${_return_upgraded_pks}
  do
    if [ "${p}" = "$1" ]
    then
      return 0
    fi
  done
  return 1
}

add_upgraded() {
  read_upgraded
  /bin/echo -E "${_return_upgraded_pks}${_return_upgraded_pks:+ }$1" > "${prefix}/etc/setup/upgraded.txt"
}

apt_install () {
  check_packages || return 1
  find_workspace || return 1
  local pkg dn bn requires wr package sbq script
  sbq=0
  for pkg in $pks
  do
    ! check_upgraded "${pkg}" || continue
    if grep -q "^$pkg " "${prefix}/etc/setup/installed.db"
    then
      if [ "${force}" != "1" -a "${force_package_check}" != "1" -a "${upgrade}" = "1" ]
      then
          qecho "Package $pkg is already installed, skipping"
          continue
      fi
    fi
    sbq=$((sbq + 1))
    [ $sbq -eq 1 ] || qecho
    
    if [ ${indent} -eq 0 ]
    then
      ind=""
    else
      ind=$(/bin/printf "%${indent}s" "")
    fi
    /bin/echo -n "${ind}Checking $pkg ..."

    download "$pkg" || continue
    dn="${_return_download_dirname}"
    bn="${_return_download_basename}"
    [ ! -f "${cacheslash}${mirrordir}/${dn}/${bn}.unpacked" ] || [ "${force}" = "1" ] || { echo; continue; }
    /bin/echo -n " unpacking ..."
    (
      cd "${cacheslash}${mirrordir}/${dn}"
      tar --numeric-owner -x -C "${prefix}/" -f "${bn}" \
        || error "Unpacking $(cygpath -aw ${cacheslash}${mirrordir}/${dn}/${bn}) in ${prefix}/" || return 1
    )
    touch "${cacheslash}${mirrordir}/${dn}/${bn}.unpacked"
    # update the package database
    # > Running setup does NOT attempt to re-install the packages identified by "0".
    # https://cygwin.com/ml/cygwin/2016-09/msg00244.html
    awk '
    NR == 1 {
      print
      next
    }
    a[$1]++ {
      next
    }
    ins != 1 && pkg <= $1 {
      print pkg, bz, 0
      ins = 1
    }
    pkg == $1 {
      next
    }
    1
    END {
      if (ins != 1) print pkg, bz, 0
    }
    ' pkg="$pkg" bz="$bn" "${prefix}/etc/setup/installed.db" > "/tmp/awk.$$" || { echo; continue; }
    mv "${prefix}/etc/setup/installed.db" "${prefix}/etc/setup/installed.db-save" || { echo; continue; }
    mv "/tmp/awk.$$" "${prefix}/etc/setup/installed.db" || { echo; continue; }
    add_upgraded "${pkg}"
    [ "${nodeps}" != "1" ] || { echo; continue; }
    # recursively install required packages
    requires=$(awk '$1=="requires", $0=$2' FS=': ' "${cacheslash}${mirrordir}/${dn}/desc")
    wr=0
    if [ "$requires" ]
    then
      echo
      qecho "${ind}Package $pkg requires $requires"
      indent=$((indent+1))
      ( noscripts=1 ; unset force_package_check; pks="${requires}" ; prefix="${prefix}" ; apt_install ) || wr=1
      indent=$((indent-1))
    else
      echo
    fi
    if [ $wr -ne 0 ]
    then
      warn "${ind}some required packages did not install, continuing"
    fi

    # run all postinstall scripts
    [ "${noscripts}" != "1" ] || continue
    find "${prefix}/etc/postinstall" -name "*.sh" | while read -r script
    do
      qecho "${ind}Running $script"
      "$script"
      mv "$script" "$script.done"
    done
    qecho "${ind}Package $pkg installed"

  done
}

apt_remove () {
  check_packages || return 1
  find_workspace || return 1
  cygcheck awk bash bunzip2 grep gzip mv sed tar xz > /etc/setup/essential.lst
  anypkgerr=0
  for pkg in $pks
  do

    download --clean "$pkg" || :
    if ! grep -q "^$pkg " /etc/setup/installed.db
    then
      if [ "${force}" = "1" ]
      then
          qecho "Package $pkg not found in the list, removing from the disk"
      else
          qecho "Package $pkg is not installed, skipping"
          continue
      fi
    fi

    if [ ! -e /etc/setup/"$pkg".lst.gz ]
    then
      warn "Package manifest missing, cannot remove $pkg, skipping"
      anypkgerr=1
      continue
    fi
    gzip -dc /etc/setup/"$pkg".lst.gz > /etc/setup/"$pkg".lst
    if awk '
    NR == FNR {
      if ($NF) ess[$NF]
      next
    }
    $NF in ess {
      exit 1
    }
    ' FS='[/\\\\]' /etc/setup/essential.lst /etc/setup/"$pkg".lst
    then
      echo "Removing $pkg"
      if [ -e /etc/preremove/"$pkg".sh ]
      then
        /etc/preremove/"$pkg".sh
        rm /etc/preremove/"$pkg".sh
      fi
      while read -r each
      do
        [ ! -f "/$each" ] || rm "/$each"
        [ ! -d "/$each" ] || rmdir --i "/$each"
      done < /etc/setup/"$pkg".lst
      rm -f /etc/setup/"$pkg".lst.gz /etc/postinstall/"$pkg".sh.done
      awk -i inplace '$1 != ENVIRON["pkg"]' /etc/setup/installed.db
      rm /etc/setup/"$pkg".lst
      qecho "Package $pkg removed"
    else
      rm /etc/setup/"$pkg".lst
      warn "apt-cyg cannot remove package $pkg, skipping"
      anypkgerr=1
      continue
    fi

  done
  return $anypkgerr
}

apt_mirror () {
  if [ "$pks" ]
  then
    awk -i inplace '
    1
    /last-mirror/ {
      getline
      print "\t" pks
    }
    ' pks="$pks" /etc/setup/setup.rc
    echo "Mirror set to \"$pks\"."
  else
    awk '
    /last-mirror/ {
      getline
      print $1
    }
    ' /etc/setup/setup.rc
  fi
}

apt_upgradesetup() {
  local preproot
  preproot=/fw
  if [ "$pks" ]
  then
    preproot="$pks"
  fi
  if [ "${preproot}" = "/" ]
  then
    error "upgradesetup needs a separate root" || return 1
  fi
  if [ -d "${preproot}" ]
  then
    echo "Skipping the setup of a secondary root in ${preproot} as it already exists"
    return
  fi
  local preprootnative
  preprootnative=$(cygpath -wa "${preproot}")
  qecho "Copying system directories to the prepared root in ${preprootnative}..."
  mkdir -p "${preproot}" "${preproot}/dev" "${preproot}/proc"
  mkdir -p -m a=rxwt "${preproot}/tmp"
  ln -sf /proc/self/fd/0 "${preproot}/dev/stdin" || :
  ln -sf /proc/self/fd/1 "${preproot}/dev/stdout" || :
  ln -sf /proc/self/fd/2 "${preproot}/dev/stderr" || :
  ln -sf /proc/self/fd "${preproot}/dev/fd" || :

  # mkdir -p "${preproot}/bin" "${preproot}/usr" "${preproot}/etc" \
  #   "${preproot}/sbin" "${preproot}/lib" "${preproot}/var" \
  #   "${preproot}/tmp" "${preproot}/proc" "${preproot}/dev"
  ## cp -av /bin/cygwin1.dll /bin/ash.exe /bin/grep.exe /bin/awk.exe /bin/cygpath.exe /bin/apt-cyg "${preproot}/bin/"
  cp -dr /bin /usr /etc /sbin /lib /var "${preproot%/}/" || :
  mv "${preproot%/}/etc/fstab" "${preproot%/}/etc/fstab.prep" || error "Moving ${preproot%/}/etc/fstab" || return 1
  umount "${preproot%/}/usr/bin" || :
  umount "${preproot%/}/usr/lib" || :
  rm -rf "${preproot%/}/usr/bin" "${preproot%/}/usr/lib"
  mount "${preprootnative}\\bin" "${preproot%/}/usr/bin" || error "Mounting ${preproot%/}/usr/bin" || return 1
  mount "${preprootnative}\\lib" "${preproot%/}/usr/lib" || error "Mounting ${preproot%/}/usr/lib" || return 1

  qecho "Resetting permissions to the prepared root in ${preprootnative}..."
  local winsys
  winsys=$(cygpath -S)
  "${winsys}/icacls.exe" "${preprootnative}" /reset /t /c /l > /dev/null
  cygpath -aw / > "${preproot}/origroot"
}

apt_upgradeinstall() {
  local preproot preprootnative
  preproot=/fw
  if [ "$pks" ]
  then
    preproot="$pks"
    pks=""
  fi
  if [ "${preproot}" = "/" ]
  then
    error "upgradeinstall needs a separate root" || return 1
  fi
  preprootnative=$(cygpath -wa "${preproot}")

  umount "${preproot%/}/usr/bin" || : # Operation not permitted
  umount "${preproot%/}/usr/lib" || : # Operation not permitted
  # /bin/rm -rf "${preproot%/}/usr/bin" "${preproot%/}/usr/lib"
  /bin/mount "${preprootnative}\\bin" "${preproot%/}/usr/bin" || : # Couldn't determine mount type [..] not permitted
  /bin/mount "${preprootnative}\\lib" "${preproot%/}/usr/lib" || : # Couldn't determine mount type [..] not permitted
  if [ ! "$pks" ]
  then
    pks=$(awk 'NR>1 && !a[$1]++ && $0=$1' "${preproot%/}/etc/setup/installed.db")
  fi
  prefix="${preproot%/}" noscripts=1 force=1 quiet=1 apt_install
  qecho "Resetting permissions to the prepared root in ${preprootnative}..."
  local winsys
  winsys=$(cygpath -S)
  "${winsys}/icacls.exe" "${preprootnative}" /reset /t /c /l > /dev/null
}

apt_upgradecopy() {
  if [ -s /origroot ]
  then
    origroot=$(cat /origroot)
  fi
  if [ ! "$origroot" ]
  then
    error "Could not find the primary root reference created with apt-cyg upgradesetup.
The upgradecopy command needs running from Command Prompt using the shell copied to 
a secondary root, e.g.

    c:\cygwin64\fw\bin\ash.exe /bin/apt-cyg upgradecopy
" || return 1
  fi
  local winsys
  winsys=$(cygpath -S)
  local cygprocs pid
  pid=$$
  "${winsys}/tasklist" /nh /m cygwin1.dll > "/tmp/cygprocs${pid}.txt"
  cygprocs=$(sed -e '/^INFO:/d' -e 's/\r//g' -e 's/ \+/ /g' -e 's/ \+$//g' -e '/^$/d' -e "/ash.exe ${pid} cygwin1.dll/d" \
    "/tmp/cygprocs${pid}.txt" \
    | while read -r proc cpid mod ; do \
        ticpid=$("${winsys}/tasklist" /nh /fi "pid eq ${cpid}" | sed -e '/^INFO:/d' -e 's/\r//g' -e 's/ \+/ /g' -e 's/ \+$//g' -e '/^$/d') ; \
        if [ "${ticpid}" ] ; then \
            echo "${proc} ${cpid}" ; \
        fi ; \
    done)
  rm -f "/tmp/cygprocs${pid}.txt"
  if [ "$cygprocs" ]
  then
    ps -eW
    error "Some Cygwin processes are still running (own PID ${pid}):
$cygprocs" || return 1
  fi

  /bin/echo -E "Moving the original bin, usr, etc, sbin, lib, var away to *.bak in ${origroot} ..."
  rm -rf "${origroot}/bin.bak" "${origroot}/usr.bak" "${origroot}/etc.bak" \
        "${origroot}/sbin.bak" "${origroot}/lib.bak" "${origroot}/var.bak"
  mv "${origroot}/bin" "${origroot}/bin.bak" || :
  mv "${origroot}/usr" "${origroot}/usr.bak" || :
  mv "${origroot}/sbin" "${origroot}/sbin.bak" || :
  mv "${origroot}/lib" "${origroot}/lib.bak" || :
  mv "${origroot}/var" "${origroot}/var.bak" || :
  mv "${origroot}/etc" "${origroot}/etc.bak" || :

  preproot="/"
  preprootnative=$(cygpath -wa "${preproot}")
  # umount "${preproot%/}/usr/bin" || :
  # umount "${preproot%/}/usr/lib" || :
  ## rm -rf "${preproot%/}/usr/bin" "${preproot%/}/usr/lib"
  ## mount "${preprootnative}\\bin" "${preproot%/}/usr/bin"
  ## mount "${preprootnative}\\lib" "${preproot%/}/usr/lib"

  /bin/echo -E "Copying upgraded files from ${preprootnative}/{bin,usr,etc,sbin,lib,var} to ${origroot}/ ..."
  cp -dr "${preproot%/}/bin" "${origroot}/" || error "Copying ${preproot%/}/bin" || return 1
  mkdir -p "${origroot}/usr"
  local d n
  for d in "${preproot%/}/usr/"*
  do
    n="${d##*/}"
    case "${n}" in
      (\*|bin|lib)
        ;;
      (*)
        cp -dr "${d}" "${origroot}/usr/" || error "Copying ${d}" || return 1
        ;;
    esac
  done
  cp -dr "${preproot%/}/etc" "${origroot}/" || error "Copying ${preproot%/}/etc" || return 1
  mv "${origroot}/etc/fstab.prep" "${origroot}/etc/fstab" || :
  cp -dr "${preproot%/}/sbin" "${origroot}/" || error "Copying ${preproot%/}/sbin" || return 1
  cp -dr "${preproot%/}/lib" "${origroot}/" || error "Copying ${preproot%/}/lib" || return 1
  cp -dr "${preproot%/}/var" "${origroot}/" || error "Copying ${preproot%/}/var" || return 1
}

apt_upgradecomplete() {
  local preproot
  preproot=/fw
  if [ "$pks" ]
  then
    preproot="$pks"
  fi
  preproot=$(cygpath -ua "${preproot}")
  if [ "${preproot}" = "/" -o ! "${preproot#/cygdrive/}" = "${preproot}" ]
  then
    error "Expecting another root such as /fw and not ${preproot} in this commitupgrade call" || return 1
  fi

  /bin/echo -E "Running postinstall scripts in $(cygpath -aw /etc/postinstall) ..."
  find "/etc/postinstall" -name "*.sh" | while read -r script
  do
    qecho "Running $script"
    "$script"
    mv "$script" "$script.done"
  done

  /bin/echo -E "Cleaning up the secondary root ${preproot} ..."
  rm -rf "${preproot}"

  echo "Cleaning up files stashed by the upgrade in /{bin,usr,etc,sbin,lib,var}.bak ..."
  rm -rf /bin.bak /usr.bak /etc.bak /sbin.bak /lib.bak /var.bak
}


apt_cache () {
  if [ "$pks" ]
  then
    vas=$(cygpath -aw "$pks")
    awk -i inplace '
    1
    /last-cache/ {
      getline
      print "\t" vas
    }
    ' vas="${vas//\\/\\\\}" /etc/setup/setup.rc
    /bin/echo -E "Cache set to \"${vas}\"."
  else
    awk '
    /last-cache/ {
      getline
      print $1
    }
    ' /etc/setup/setup.rc
  fi
}

if [ -p /dev/stdin ]
then
  while read -r p
  do
      read -r p
      pks="${pks}${pks:+ }${p}"
  done
fi

# process options
nodeps=
noscripts=
force=
until [ $# = 0 ]
do
  case "$1" in

    --nodeps)
      nodeps=1
      shift
    ;;

    --noscripts)
      noscripts=1
      shift
    ;;

    --force)
      force=1
      shift
    ;;

    --version)
      printf "$version"
      exit
    ;;

    update)
      command=$1
      shift
    ;;

    list | cache  | remove | depends | listall  | download | listfiles |\
    show | mirror | search | install | category | rdepends | searchall |\
    upgradesetup | upgradeinstall | upgradecopy | upgradecomplete)
      if [ "$command" ]
      then
        pks="${pks}${pks:+ }$1"
      else
        command=$1
      fi
      shift
    ;;

    *)
      pks="${pks}${pks:+ }$1"
      shift
    ;;

  esac
done

set -a

if type apt_$command | grep -q function
then
  # arch=${HOSTTYPE/i6/x}
  # arch=$(file /bin/cat | /bin/sed -e 's/.*\(x86[^,]*\),.*/\1/' -e 's/-/_/g')
  if [ "${PROCESSOR_ARCHITECTURE}" = x86 -a ! "${PROCESSOR_ARCHITEW6432+set}" ]
  then
    arch="x86"
  else
    arch="x86_64"
  fi
  rm -f "/etc/setup/upgraded.txt"
  "apt_${command}"
else
  /bin/echo -E "$usage"
  exit 1
fi
